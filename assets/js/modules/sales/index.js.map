{
  "version": 3,
  "sources": ["../../../../web/js/modules/sales/index.js", "../../../../web/js/modules/sales/breadcrum.js", "../../../../web/js/modules/sales/constants.js", "../../../../web/js/modules/sales/modals/closeCashRegister.js", "../../../../web/js/modules/sales/request.js", "../../../../web/js/modules/sales/modals/findCustomer.js", "../../../../web/js/modules/sales/modals/findProduct.js", "../../../../web/js/modules/sales/modals/openCashRegister.js", "../../../../web/js/modules/sales/modals/paidSale.js", "../../../../web/js/modules/sales/sale-detail.js", "../../../../web/js/modules/sales/tabla.js"],
  "sourcesContent": ["import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { CLIENTE_VENTA_KEY, PRODUCTOS_VENTA_KEY } from \"../../utils/constants\";\nimport { getCusotmerPrice, getItemLocalStorage, hasItemLocalStorage, setItemLocalStorage } from \"../../utils/functions\";\nimport SaleBreadcrum from \"./breadcrum\";\nimport { modals } from \"./constants\";\nimport CloseCashRegister from \"./modals/closeCashRegister\";\nimport FindCustomerModal from \"./modals/findCustomer\";\nimport FindProductModal from \"./modals/findProduct\";\nimport OpenCashRegister from \"./modals/openCashRegister\";\nimport PaidSale from \"./modals/paidSale\";\nimport { anyProductInStock } from \"./request\";\nimport SaleDetail from \"./sale-detail\";\nimport ProductsSalesTable from \"./tabla\";\n\nconst container = document.getElementById(\"divContainer\");\nconst root = createRoot(container);\n\n\n\nconst initModals = {\n    findProduct: false,\n    findCustomer: false,\n    closeCash: false,\n    openCash: false,\n    paidSale: false,\n};\n\nconst reducer = (state, action) => {\n    switch (action.modal) {\n        case modals.findProduct:\n            return { ...state, [action.modal]: action.value };\n        case modals.findCustomer:\n            return { ...state, [action.modal]: action.value };\n        case modals.paidSale:\n            return { ...state, [action.modal]: action.value };\n        case modals.openCash:\n            return { ...state, [action.modal]: action.value };\n        case modals.closeCash:\n            return { ...state, [action.modal]: action.value };\n    }\n}\n\n\nconst Sales = () => {\n    const [products, setProducts] = React.useState(() => {\n        if (hasItemLocalStorage(PRODUCTOS_VENTA_KEY)) {\n            const loadProducts = JSON.parse(getItemLocalStorage(PRODUCTOS_VENTA_KEY));\n            return loadProducts;\n        } else {\n            return [];\n        }\n    });\n    const [customer, setCustomer] = React.useState(() => {\n        if (hasItemLocalStorage(CLIENTE_VENTA_KEY)) {\n            const laodClient = JSON.parse(getItemLocalStorage(CLIENTE_VENTA_KEY));\n            return laodClient;\n        } else {\n            return null\n        }\n    });\n    const [fondoCaja, setFondoCaja] = React.useState(0);\n    const [totalSale, setTotalSale] = React.useState(0);\n\n    const [modalsState, dispatchModals] = React.useReducer(reducer, initModals);\n\n    const handleCloseModal = (modal) => dispatchModals({ modal, value: false });\n\n    const addCustomerToSale = (customer) => {\n        customer = {\n            ...customer,\n            idCliente: new Number(customer.idCliente),\n        }\n        setItemLocalStorage(CLIENTE_VENTA_KEY, JSON.stringify(customer));\n        setCustomer(customer);\n    }\n\n    const cancelSale = () => {\n        setProducts([]);\n        setCustomer(null);\n    }\n\n    const closeSale = () => {\n        dispatchModals({ modal: modals.paidSale, value: true })\n    }\n\n    const addProduct = (product) => {\n        console.log(product);\n        const precio = getCusotmerPrice(customer, product);\n        product = {\n            ...product,\n            mayoreo: new Number(product.mayoreo),\n            medida: new Number(product.medida),\n            medio: new Number(product.medio),\n            venta: new Number(product.venta),\n            precio,\n            cantidad: 1\n        };\n        console.log(product);\n\n        setProducts([...products, product]);\n    }\n\n    const increaseAmountProduct = (product, quantity) => {\n        const newCantidad = product.cantidad + quantity;\n        const updatedProducts = products.map((productInSale) => (productInSale.idProducto === product.idProducto ? { ...productInSale, cantidad: newCantidad } : productInSale))\n        setProducts(updatedProducts);\n    }\n\n    const updateQuantityProduct = (product, quantity) => {\n        const newCantidad = quantity;\n        const updatedProducts = products.map((productInSale) => (productInSale.idProducto === product.idProducto ? { ...productInSale, cantidad: newCantidad } : productInSale))\n        setProducts(updatedProducts);\n    }\n\n    const checkProductIntoSale = (product) => {\n        return products.findIndex((productInSale) => productInSale.idProducto === product.idProducto) > -1;\n    };\n\n    const getProductIntoSale = (product) => {\n        const index = products.findIndex((producInSale) => producInSale.idProducto === product.idProducto);\n        const producInSale = products[index];\n        return producInSale;\n    }\n\n    const handleAddProduct = (product) => {\n        (async () => {\n            const anyProduct = await anyProductInStock(product);\n\n            if (anyProduct) {\n                if (checkProductIntoSale(product)) {\n                    const productInSale = getProductIntoSale(product);\n                    increaseAmountProduct(productInSale, 1);\n                } else {\n                    addProduct(product);\n                }\n                dispatchModals({ modal: modals.findProduct, value: false });\n            } else {\n\n            }\n        })();\n    }\n\n    React.useEffect(() => {\n        (() => {\n            setItemLocalStorage(PRODUCTOS_VENTA_KEY, JSON.stringify(products));\n            const total = products.reduce((sum, product) => sum += (product.cantidad * getCusotmerPrice(customer, product)), 0);\n            setTotalSale(total);\n        })();\n    }, [products, customer]);\n\n    React.useEffect(() => {\n        (() => {\n            setItemLocalStorage(CLIENTE_VENTA_KEY, JSON.stringify(customer));\n        })();\n    }, [customer]);\n\n\n    return (\n        <>\n            <SaleBreadcrum openModal={({ modal, value }) => {\n                dispatchModals({ modal, value });\n            }}\n                customer={customer}></SaleBreadcrum>\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col table-responsive\">\n                                    <ProductsSalesTable\n                                        products={products}\n                                        total={totalSale}\n                                        onDeleteProduct={() => { }}\n                                        onUpdateQuantity={(product, cantidad) => { updateQuantityProduct(product, cantidad) }}></ProductsSalesTable>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <SaleDetail customer={customer} total={totalSale} onCloseSale={closeSale} onCancelSale={cancelSale}></SaleDetail>\n            </div>\n            <FindProductModal\n                show={modalsState.findProduct}\n                onClose={handleCloseModal}\n                selectedProduct={handleAddProduct}></FindProductModal>\n            <FindCustomerModal\n                show={modalsState.findCustomer}\n                onClose={handleCloseModal}\n                selectedCustomer={addCustomerToSale}></FindCustomerModal>\n            <PaidSale\n                show={modalsState.paidSale}\n                onClose={handleCloseModal}\n                total={totalSale}\n                onPaid={() => { }}></PaidSale>\n            <OpenCashRegister\n                show={modalsState.openCash}\n                onClose={handleCloseModal}\n                onPaid={() => { }}></OpenCashRegister>\n            <CloseCashRegister \n                show={modalsState.closeCash}\n                onClose={handleCloseModal}\n                montoInicial={fondoCaja}\n                onPaid={() => { }}></CloseCashRegister>\n        </>\n    );\n};\n\nroot.render(<Sales></Sales>);", "import * as React from \"react\";\nimport { modals } from \"./constants\";\nimport { Dropdown } from \"react-bootstrap\";\nconst SaleBreadcrum = ({openModal, customer}) => {\n    return (\n        <>\n            <div className=\"breadcrumb-header justify-content-between\">\n                <div className=\"my-auto\">\n                    <div className=\"d-flex\">\n                        <h3 className=\"content-title mb-0 my-auto\">Venta</h3>\n                    </div>\n                </div>\n                <div className=\"d-flex my-xl-auto right-content\">\n                    <div className=\"pe-1 mb-xl-0\">\n                        <button type=\"button\" className=\"btn btn-success me-2\" onClick={() => openModal({modal: modals.findCustomer, value: true})}>\n                            <i className=\"bi bi-person-circle\"></i>\n                        </button>\n                    </div>\n                    <div className=\"pe-1 mb-xl-0\">\n                        <button type=\"button\" className=\"btn btn-info me-2 btn-b\" data-bs-toggle=\"modal\" data-bs-target=\"#nuevoCliente\" >\n                            <i className=\"bi bi-person-plus\"></i>\n                        </button>\n                    </div>\n                    <div className=\"pe-1 mb-xl-0\">\n                        <button type=\"button\" className=\"btn btn-primary me-2\" disabled={customer === null} onClick={() => openModal({modal: modals.findProduct, value: true})}>\n                            <i className=\"bi bi-search\"></i>\n                        </button>\n                    </div>\n                    <div className=\"mb-xl-0\">\n                        <Dropdown className=\"btn-group dropdown\">\n                            <Dropdown.Toggle variant=\"warning\" id=\"dropdownMenuDate\">\n                               Caja\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item onClick={() => openModal({modal: modals.openCash, value: true})}>Abrir</Dropdown.Item>\n                                <Dropdown.Item onClick={() => openModal({modal: modals.closeCash, value: true})}>Cerrar</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default SaleBreadcrum;", "export const modals = {\n    findProduct: \"findProduct\",\n    findCustomer: \"findCustomer\",\n    closeCash: \"closeCash\",\n    openCash: \"openCash\",\n    paidSale: \"paidSale\"\n};", "import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useFormik } from \"formik\";\nimport { modals } from \"../constants\";\nimport { findProduct } from \"../request\";\nimport { totalCurrency } from \"../../../utils/functions\";\n\nconst CloseCashRegister = ({ onPaid, show, onClose, montoInicial }) => {\n    const [total, setTotal] = React.useState(0);\n\n    const formik = useFormik({\n        initialValues: {\n            \"1000\": 0,\n            \"500\": 0,\n            \"200\": 0,\n            \"100\": 0,\n            \"50\": 0,\n            \"20\": 0,\n            \"monedas\": 0,\n        },\n        onSubmit: async ({ name }) => {\n            const { data } = await findProduct(name);\n        },\n    });\n\n    React.useEffect(() => {\n        const moneyKeys = Object.keys(formik.values);\n        const values = moneyKeys.map((key) => ( key === \"monedas\" ? new Number(formik.values[key]): new Number(key) * new Number(formik.values[key])));\n        const total = values.reduce((sum, money) => sum += money ,0);\n        setTotal(total);\n    }, [formik.values]);\n\n    const handleClose = () => {\n        onClose(modals.closeCash);\n        formik.resetForm();\n    }\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header>\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Cerrar Caja</h5>\n                <button type=\"button\" className=\"btn-close\" onClick={handleClose}></button>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={formik.handleSubmit}>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <h4>Fondo:</h4>\n                        </div>\n                        <div className=\"col\">\n                            <h5 id=\"fondoCaja\">{totalCurrency(montoInicial)}</h5>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">$1000</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"1000\"]} min=\"0\" className=\"form-control input-cierre\" name=\"1000\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">$500</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"500\"]} min=\"0\" className=\"form-control input-cierre\" name=\"500\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">$200</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"200\"]} min=\"0\" className=\"form-control input-cierre\" name=\"200\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">$100</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"100\"]} min=\"0\" className=\"form-control input-cierre\" name=\"100\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">$50</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"50\"]} min=\"0\" className=\"form-control input-cierre\" name=\"50\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">$20</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"20\"]} min=\"0\" className=\"form-control input-cierre\" name=\"20\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"\" className=\"col\">Monedas</label>\n                        <div className=\"col\">\n                            <input type=\"number\" onChange={formik.handleChange} value={formik.values[\"monedas\"]} min=\"0\" className=\"form-control input-cierre\" name=\"monedas\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <h4>Total:</h4>\n                        </div>\n                        <div className=\"col\">\n                            <h5 id=\"totalCierre\">{totalCurrency(total)}</h5>\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn btn-primary\" type=\"submit\">Pagar</button>\n                    </div>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n};\n\nexport default CloseCashRegister;", "import { CLIENTE_VENTA_KEY, PRODUCTOS_VENTA_KEY } from \"../../utils/constants\";\nimport { get, post} from \"../../utils/http\";\n\nconst closeSale = async () => {\n\n}\n\nconst cancelSale = async () => {\n    removeItemLocalStorage(CLIENTE_VENTA_KEY);\n    removeItemLocalStorage(PRODUCTOS_VENTA_KEY);\n}\n\nconst findCustomer = async (name) => {\n    const {data} = await get(\"/controller/clientes/filtro.php?filter=\"+name);\n    return data;\n}\n\nconst findProduct = async (name) => {\n    const { data } = await get(\"/controller/productos/filtro.php?filter=\"+name);\n    return data;\n}\n\nconst openCashRegisert = async () => {\n\n}\n\nconst closeCashRegiser = async () => {\n    \n}\n\nconst anyProductInStock = async (product) => {\n    let { data } =  await get('/controller/stock/validar?idProducto=' + product.idProducto);\n    return data.data;\n}\n\nexport {\n    findProduct, \n    findCustomer,\n    anyProductInStock,\n};\n", "import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useFormik } from \"formik\";\nimport { modals } from \"../constants\";\nimport { findCustomer } from \"../request\";\n\nconst FindCustomerModal = ({ selectedCustomer, show, onClose }) => {\n    const [customers, setCustomers] = React.useState([]);\n\n    const formik = useFormik({\n        initialValues: {\n            name: \"\",\n        },\n        onSubmit: async ({ name }) => {\n            const { data } = await findCustomer(name);\n            setCustomers(data);\n        }\n    });\n\n    const handleClose = () => {\n        setCustomers([]);\n        onClose(modals.findCustomer);\n        formik.resetForm();\n    }\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header>\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Agregar Cliente a Venta</h5>\n                <button type=\"button\" className=\"btn-close\" onClick={handleClose}></button>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={formik.handleSubmit}>\n                    <div className=\"form-group row\">\n                        <div className=\"col-9\">\n                            <input className=\"form-control\"\n                                placeholder=\"Buscar...\"\n                                name=\"name\"\n                                value={formik.values.name}\n                                onChange={formik.handleChange} />\n                        </div>\n                        <div className=\"col-3\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Buscar</button>\n                        </div>\n                    </div>\n                </form>\n\n                <div>\n                    <table style={{ width: \"100%\" }} >\n                        <thead>\n                            <tr>\n                                <th>Cliente</th>\n                                <th>Acci\u00F3n</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                customers.map((customer, id) => (\n                                    <tr key={id}>\n                                        <td>{customer.nombre}</td>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-sm btn-success\"\n                                                onClick={() => {\n                                                    selectedCustomer(customer);\n                                                    handleClose();\n                                                }}>\n                                                Agregar\n                                            </button>\n                                        </td>\n                                    </tr>\n                                ))\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </Modal.Body>\n        </Modal>\n    )\n};\n\nexport default FindCustomerModal;", "import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useFormik } from \"formik\";\nimport { modals } from \"../constants\";\nimport { findProduct } from \"../request\";\n\nconst FindProductModal = ({ selectedProduct, show, onClose }) => {\n    const [products, setProducts] = React.useState([]);\n\n    const formik = useFormik({\n        initialValues: {\n            name: \"\",\n        },\n        onSubmit: async ({ name }) => {\n            const { data } = await findProduct(name);\n            setProducts(data);\n        }\n    });\n\n    const handleClose = () => {\n        setProducts([]);\n        onClose(modals.findProduct);\n        formik.resetForm();\n    }\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header>\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Agregar Producto a Venta</h5>\n                <button type=\"button\" className=\"btn-close\" onClick={handleClose}></button>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={formik.handleSubmit}>\n                    <div className=\"form-group row\">\n                        <div className=\"col-9\">\n                            <input className=\"form-control\"\n                                placeholder=\"Buscar...\"\n                                name=\"name\"\n                                value={formik.values.name}\n                                onChange={formik.handleChange} />\n                        </div>\n                        <div className=\"col-3\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Buscar</button>\n                        </div>\n                    </div>\n                </form>\n\n                <div>\n                    <table style={{ width: \"100%\" }} >\n                        <thead>\n                            <tr>\n                                <th>Producto</th>\n                                <th>Acci\u00F3n</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                products.map((product, id) => (\n                                    <tr key={id}>\n                                        <td>{product.nombre}</td>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-sm btn-success\"\n                                                onClick={() => selectedProduct(product)}>\n                                                Agregar\n                                            </button>\n                                        </td>\n                                    </tr>\n                                ))\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </Modal.Body>\n        </Modal>\n    )\n};\n\nexport default FindProductModal;", "import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useFormik } from \"formik\";\nimport { modals } from \"../constants\";\nimport { findProduct } from \"../request\";\n\nconst OpenCashRegister = ({ onPaid, show, onClose }) => {\n    const formik = useFormik({\n        initialValues: {\n            paid: \"\",\n        },\n        onSubmit: async ({ name }) => {\n            const { data } = await findProduct(name);\n        },\n    });\n\n    const handleClose = () => {\n        onClose(modals.openCash);\n        formik.resetForm();\n    }\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header>\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Abrir Caja</h5>\n                <button type=\"button\" className=\"btn-close\" onClick={handleClose}></button>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={formik.handleSubmit}>\n\n                    <div className=\"form-group\">\n                        <h4>Recibe:</h4>\n\n                        <input className=\"form-control\"\n                            name=\"paid\"\n                            type=\"number\"\n                            required\n                            value={formik.values.paid}\n                            onChange={(e) => {\n                                formik.handleChange(e);\n                            }} />\n\n\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn btn-primary\" disabled={formik.values.paid == 0} type=\"submit\">Abrir</button>\n                    </div>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n};\n\nexport default OpenCashRegister;", "import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useFormik } from \"formik\";\nimport { modals } from \"../constants\";\nimport { findProduct } from \"../request\";\nimport { totalCurrency } from \"../../../utils/functions\";\n\nconst PaidSale = ({ onPaid, show, onClose, total }) => {\n    const [cambio, setCambio] = React.useState(0);\n\n    const formik = useFormik({\n        initialValues: {\n            paid: \"\",\n        },\n        onSubmit: async ({ name }) => {\n            const { data } = await findProduct(name);\n        },\n    });\n\n    const handleClose = () => {\n        setCambio(0);\n        onClose(modals.paidSale);\n        formik.resetForm();\n    }\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header>\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Pagar Venta</h5>\n                <button type=\"button\" className=\"btn-close\" onClick={handleClose}></button>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={formik.handleSubmit}>\n                    <div className=\"form-group\">\n                        <h4>Total Venta:</h4>\n                        <span >{totalCurrency(total)}</span>\n                    </div>\n                    <div className=\"form-group\">\n                        <h4>Recibe:</h4>\n\n                        <input className=\"form-control\"\n                            name=\"paid\"\n                            type=\"number\"\n                            required\n                            value={formik.values.paid}\n                            onChange={(e) => {\n                                setCambio(formik.values.paid - total);\n                                formik.handleChange(e);\n                            }} />\n                        <div className=\"form-group\">\n                            <h4>Cambio Venta:</h4>\n                            <span >{totalCurrency(cambio)}</span>\n                        </div>\n                        <div className=\"col-3\">\n                            <button className=\"btn btn-primary\" disabled={cambio < 0 || formik.values.paid == 0} type=\"submit\">Pagar</button>\n                        </div>\n                    </div>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n};\n\nexport default PaidSale;", "import * as React from \"react\";\nimport { totalCurrency } from \"../../utils/functions\";\n\nconst SaleDetail = ({ customer, total, onCancelSale, onCloseSale }) => {\n    return (\n        <>\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <dl>\n                                    <dt>Cliente</dt>\n                                    <dd id=\"infoCliente\">{customer?.nombre || \"---\"}</dd>\n\n                                    <dt>Total</dt>\n                                    <dd id=\"totalVentaDetalle\">{totalCurrency(total)}</dd>\n                                </dl>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <button id=\"cancelarVenta\" className=\"btn btn-danger mr-1\" onClick={onCancelSale}>Cancelar</button>\n\n                                <button className=\"btn btn-success\" disabled={customer === null} onClick={onCloseSale}>Finalizar</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default SaleDetail;", "import * as React from \"react\";\nimport { getCusotmerPrice, totalCurrency } from \"../../utils/functions\";\n\nconst ProductsSalesTable = ({ products, total, onUpdateQuantity, onDeleteProduct }) => {\n    return (\n        <>\n            <table className=\"table table-bordered\" >\n                <thead>\n                    <tr>\n                        <td>Producto</td>\n                        <td>Precio</td>\n                        <td>Cantidad</td>\n                        <td>Total</td>\n                        <td></td>\n                    </tr>\n                </thead>\n                <tbody >\n                    {\n                        products.map((product, id) => (\n                            <tr key={id}>\n                                <td>{product.nombre}</td>\n                                <td>{totalCurrency(product.precio)}</td>\n                                <td>\n                                    <input type={\"number\"} min={1} value={product.cantidad} onChange={(e) => onUpdateQuantity(product, e.target.value)}/>\n                                </td>\n                                <td>{totalCurrency(product.cantidad * product.precio)}</td>\n                                <td>\n                                    <button className=\"btn btn-sm btn-danger\" onClick={() => onDeleteProduct(product)}>\n                                        Borrar\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    }\n                </tbody>\n                <tfoot>\n                    <tr className=\"tx-blod\">\n                        <td colSpan=\"2\"></td>\n                        <td>TOTAL</td>\n                        <td id=\"totalVentaTabla\">{totalCurrency(total)}</td>\n                    </tr>\n                </tfoot>\n            </table>\n        </>\n    );\n}\n\nexport default ProductsSalesTable;"],
  "mappings": "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",
  "names": []
}
